import { Session, SessionConfig, SessionEvents, UserSessionConfig } from '../session';
import { SocketProtocol } from '../api/types/socket';
import { Logger } from '../logger';
import { EventEmitter } from '../EventEmitter';
export declare class Client<TSocket extends SocketProtocol, TEvents extends ClientEvents, TSession extends Session<SessionEvents>> extends EventEmitter {
    socket: TSocket;
    logger: Logger;
    device: DeviceInfo;
    protected _config: SessionConfig | undefined;
    queue?: ClientEvents['queue'];
    constructor({ socket, logger, }: {
        socket: TSocket;
        logger?: Logger;
    });
    on<K extends Extract<keyof TEvents, string>>(event: K, listener: (value: TEvents[K]) => void): this;
    startSession(config?: Partial<UserSessionConfig>): Promise<TSession>;
    setConfig(config: Partial<UserSessionConfig>): Promise<SessionConfig>;
    getConfig(): SessionConfig | undefined;
    protected waitForSessionStart(session: TSession): Promise<unknown>;
}
export interface ClientEvents {
    queue: {
        type: 'session';
        position: number;
    } | {
        type: 'concurrent';
        name: string;
        position: number;
    };
    queueEnd: void;
    error: {
        message: string;
    };
    session: Session;
}
export interface DeviceInfo {
    type: string;
    name: string;
    osVersion: string;
    orientation: 'portrait' | 'landscape';
    screen: {
        width: number;
        height: number;
        devicePixelRatio?: number;
    };
}
