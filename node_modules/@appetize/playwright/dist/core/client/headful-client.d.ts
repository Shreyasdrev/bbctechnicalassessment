import { AppetizeApp } from '../api/types/app';
import { Client, ClientEvents, DeviceInfo } from './client';
import { Logger } from '../logger';
import { Session, SessionConfig, SessionEvents, SessionInfo, UserSessionConfig } from '../session';
import { SocketProtocol } from '../api/types/socket';
import { AppetizeWindowProtocol } from '../window';
export declare class HeadfulClient<TSocket extends SocketProtocol, TEvents extends HeadfulClientEvents<TSession>, TSession extends Session<SessionEvents>> extends Client<TSocket, TEvents, TSession> {
    device: HeadfulDeviceInfo;
    app?: AppetizeApp;
    protected session: TSession | undefined;
    protected window: AppetizeWindowProtocol;
    protected ready: boolean;
    protected isRequestingSession: boolean;
    private _lastSetConfigCallId;
    constructor({ socket, window, logger, config, autoInit, }: {
        autoInit?: boolean;
        socket: TSocket;
        window: AppetizeWindowProtocol;
        logger?: Logger;
        config?: SessionConfig;
    });
    protected init(args?: {
        isReinit?: boolean;
    }): Promise<void>;
    waitUntilReady(): Promise<void>;
    startSession(config?: Partial<UserSessionConfig>): Promise<TSession>;
    endSession(): Promise<void>;
    config(args: Partial<UserSessionConfig>): Promise<UserSessionConfig>;
    setConfig({ buildId, publicKey, ...config }: Partial<UserSessionConfig>): Promise<SessionConfig>;
    protected assignConfig(config: UserSessionConfig): SessionConfig;
    protected validateConfig(config: Partial<UserSessionConfig>): Partial<UserSessionConfig>;
    private cancelSessionRequest;
    protected createSession(config: SessionConfig, info: SessionInfo): TSession;
}
export interface HeadfulClientEvents<TSession extends Session> extends ClientEvents {
    session: TSession;
    app: AppetizeApp;
    deviceInfo: HeadfulDeviceInfo;
    sessionRequested: void;
    sessionEnded: void;
}
export interface HeadfulDeviceInfo extends DeviceInfo {
    embed: {
        width: number;
        height: number;
        screen: {
            width: number;
            height: number;
            offset: {
                x: number;
                y: number;
            };
        };
    };
}
