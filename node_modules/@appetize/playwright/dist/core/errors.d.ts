import { PlayActionErrorResponse } from './api/types/recorder';
export declare function captureStackTrace(targetObject: any, constructorOpt: any): void;
export declare function captureOperationalError(e: unknown, constructorOpt: any): Promise<void>;
export declare class OperationalError extends Error {
    isOperational: boolean;
    constructor(message: string);
}
export declare class ActionError extends OperationalError {
    errorId: PlayActionErrorResponse['errorId'];
    playback: PlayActionErrorResponse['playback'];
    constructor(error: PlayActionErrorResponse, message?: string);
}
export declare class ActionElementNotFoundError extends ActionError {
    constructor(error: PlayActionErrorResponse & {
        errorId: 'notFound';
    });
}
export declare class ActionAmbiguousElementError extends ActionError {
    constructor(error: PlayActionErrorResponse & {
        errorId: 'ambiguousMatch';
    });
}
export declare class ActionInvalidArgumentError extends ActionError {
    constructor(error: PlayActionErrorResponse & {
        errorId: 'invalidArgument';
    });
}
export declare class ActionInternalError extends ActionError {
    constructor(error: PlayActionErrorResponse & {
        errorId: 'internalError';
    });
}
export declare class TimeoutError extends OperationalError {
}
export declare class ActionTimeoutError extends OperationalError {
    playback: PlayActionErrorResponse['playback'];
    constructor(playback: PlayActionErrorResponse['playback'], msg: string);
}
export declare class RecorderRequiredError extends OperationalError {
    constructor(feature: string);
}
export declare function formatAmbiguousElements(elements: any[]): string;
export declare function captureLocationFromError(e: Error): {
    file: string;
    line: string;
    column: string;
} | undefined;
