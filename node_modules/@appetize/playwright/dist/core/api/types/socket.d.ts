import { EventEmitter } from '../../EventEmitter';
export interface SocketProtocol extends EventEmitter {
    send(event: string, data?: any): Promise<void>;
    disconnect(): Promise<void>;
}
interface CommonSocketEvents {
    connect: void;
    timeout: void;
    reconnect: {
        attempt: number;
    };
    close: CloseEvent;
    error: CloseEvent;
    userError: {
        message: string;
        requiresArm?: boolean;
    };
    disconnect: void;
}
export interface ClientSocketEvents extends CommonSocketEvents {
    newSession: {
        path: string;
        sessionToken: string;
    };
    queue: {
        position: number;
    };
    concurrentQueue: {
        position: number;
        name: string;
    };
}
export interface AppetizerSocketEvents extends CommonSocketEvents {
    connect: void;
    timeout: void;
    reconnect: {
        attempt: number;
    };
    close: CloseEvent;
    error: CloseEvent;
    userError: {
        message: string;
        requiresArm?: boolean;
    };
    disconnect: void;
    endSession: {
        timeLimitElapsed?: boolean;
        timeLimit?: number;
        timeLimitFreeTier?: unknown;
        maxSessionLength?: number;
    };
    ready: void;
    h264Data: {
        buffer: Buffer;
        hash: string;
        width: number;
        height: number;
    };
    frameData: {
        buffer: Buffer;
        hash: string;
        width: number;
        height: number;
    };
    audioData: {
        buffer: Buffer;
        hash: string;
    };
    launchStatus: {
        status: string;
    };
    countdownWarning: {
        secondsRemaining: number;
    };
    timeoutReset: void;
    timeoutWarning: {
        secondsRemaining: number;
    };
    timeLimitCountdown: {
        secondsRemaining: number;
    };
    userInteractionReceived: {
        type: string;
        [key: string]: any;
    };
    adbOverTcp: {
        forwards: Array<{
            destination: string;
            port: number;
        }>;
        hash: string;
        hostname: string;
        port: number;
        user: string;
    };
    appLaunch: void;
    screenshot: {
        data: Uint8Array;
        mimeType: string;
        success: boolean;
    };
    capabilities: {
        getScreenshot?: boolean;
    };
    uiDump: unknown;
    debug: {
        message: string;
    };
    playbackError: unknown;
    playbackFoundAndSent: unknown;
    deleteEvent: unknown;
    recordedAction: unknown;
    recordedEvent: unknown;
    interceptRequest: AppetizeNetworkPayload;
    interceptResponse: AppetizeNetworkPayload;
    interceptError: AppetizeNetworkPayload;
    devtoolsConnection: {
        secure?: boolean;
        url: string;
    };
}
export interface AppetizeNetworkPayload {
    requestId: string;
    request: {
        bodySize: number;
        cookies: string[];
        headers: Array<{
            name: string;
            value: string;
        }>;
        headersSize: number;
        httpVersion: string;
        method: string;
        queryString: unknown[];
        url: string;
        postData?: {
            mimeType: string;
            text?: string;
        };
    };
    response?: {
        bodySize: number;
        content: {
            compression: number;
            size: number;
            mimeType: string;
            text: string;
        };
        cookies: string[];
        headers: Array<{
            name: string;
            value: string;
        }>;
        headersSize: number;
        httpVersion: string;
        redirectURL: string;
        statusText: string;
        status: number;
    };
    serverIPAddress?: string;
    cache?: unknown;
    startedDateTime?: string;
    time?: string;
    timings?: {
        send: number;
        receive: number;
        wait: number;
        ssl: number;
        connect: number;
    };
    error?: {
        errorText: string;
    };
}
export {};
