import { StrictUnion } from '../../../util';
import { Coordinates, SwipeMove } from './common';
export type Action = TapAction | SwipeAction | KeypressAction | TypeAction | FindElementsAction | SoftKeyboardReturnAction | SoftKeyboardTextAction;
export type TouchAction = TapAction | SwipeAction;
export type RecordedAction = RecordedTapAction | RecordedSwipeAction | RecordedKeypressAction;
export type Position = {
    x: number;
    y: number;
};
export interface ActionBase {
    type: string;
    id?: string;
    appId?: string;
}
export interface RecordedActionBase extends ActionBase {
    time: number;
}
export interface RecordedTouchAction extends RecordedActionBase {
    appId: string;
    element?: Element;
    coordinates: Coordinates;
}
export type TouchActionBase = ActionBase & StrictUnion<{
    element: ElementSelector;
    localPosition?: Position;
} | {
    coordinates: Coordinates;
} | {
    localPosition: Position;
}>;
export interface RecordedTapAction extends RecordedTouchAction {
    type: 'tap';
    duration?: number;
}
export type TapAction = TouchActionBase & {
    type: 'tap';
    duration?: number;
};
export interface TypeAction extends ActionBase {
    type: 'typeText';
    text: string;
}
export interface RecordedKeypressAction extends RecordedActionBase {
    type: 'keypress';
    key: string;
    shiftKey: BooleanNumber | Boolean;
    character?: string;
}
export interface KeypressAction extends ActionBase {
    type: 'keypress';
    key: string;
    character?: string;
    shiftKey?: BooleanNumber;
}
export interface SoftKeyboardReturnAction extends ActionBase {
    type: 'softKeyboardReturn';
}
export interface SoftKeyboardTextAction extends ActionBase {
    type: 'softKeyboardText';
    text: string;
}
export interface RecordedSwipeAction extends RecordedTouchAction {
    type: 'swipe';
    moves: SwipeMove[];
}
export type SwipeAction = TouchActionBase & {
    type: 'swipe';
    moves: SwipeMove[];
};
export interface FindElementsAction extends ActionBase {
    type: 'findElements';
    element: ElementSelector;
}
export interface PlayActionResult<A extends Action = Action> {
    playback?: {
        id?: string;
        action: A;
        timeout: number;
    };
    matchedElements?: Element[];
}
export interface Element {
    path: string;
    type: string;
    source: string;
    bounds: ElementBounds;
    attributes: IOSElementAttributes | AndroidElementAttributes;
    accessibilityElements?: IOSAccessibilityElement[];
}
export interface ElementBounds {
    x: ObjCNumber;
    y: ObjCNumber;
    width: ObjCNumber;
    height: ObjCNumber;
}
export interface FullElement extends Element {
    children: FullElement[];
}
export type ElementSelector = Partial<Element> & {
    attributes?: Partial<Element['attributes']>;
};
export interface IOSElementAttributes extends Record<string, string | undefined | null>, IOSAccessibilityAttributes {
    text?: string;
    class?: string;
    baseClass?: string;
    title?: string;
    label?: string;
    placeholder?: string;
    userInteractionEnabled?: BooleanString;
    isHidden?: BooleanString;
}
export interface IOSAccessibilityAttributes {
    accessibilityLabel?: string;
    accessibilityIdentifier?: string;
    accessibilityValue?: string;
    accessibilityHint?: string;
}
export interface IOSAccessibilityElement extends IOSAccessibilityAttributes {
    accessibilityFrame?: ElementBounds;
    accessibilityTraits?: number;
}
export interface AndroidElementAttributes extends Record<string, string | undefined | null> {
    'resource-id'?: string | null;
    'content-desc'?: string | null;
    class?: string;
}
export type BooleanNumber = 0 | 1;
export type BooleanString = '0' | '1';
export type ObjCNumber = number | 'inf' | '-inf';
interface Playback<A extends Action | RecordedAction | RecordedTouchAction> {
    id?: string;
    action: A;
    timeout: number;
}
export type PlayActionErrorResponse<A extends Action | RecordedAction | RecordedTouchAction = Action> = {
    message: string;
    playback: Playback<A>;
} & ({
    errorId: 'unknown';
} | {
    errorId: 'invalidArgument';
} | {
    errorId: 'internalError';
} | {
    errorId: 'notFound';
    playback: A extends TouchAction | RecordedTouchAction ? Playback<A> : undefined;
} | {
    errorId: 'ambiguousMatch';
    playback: A extends TouchAction | RecordedTouchAction ? Playback<A> : undefined;
    matchedElements: Element[];
});
export {};
