import { StrictUnion } from '../../../util';
import { Coordinates, SwipeMove } from './common';
import * as InternalAPI from './internal';
export type Action = TapAction | SwipeAction | KeypressAction | TypeAction | FindElementsAction | SoftKeyboardReturnAction | SoftKeyboardTextAction;
export type RecordedAction = RecordedTapAction | RecordedSwipeAction | RecordedKeypressAction;
export type TouchAction = TapAction | SwipeAction;
export type Position = {
    x: number;
    y: number;
} | {
    x: `${string}%`;
    y: `${string}%`;
};
export type RecordedPosition = {
    x: number;
    y: number;
};
export interface RecordedActionBase extends ActionBase {
    time: number;
    appId: string;
}
export interface ActionBase {
    type: string;
    id?: string;
    appId?: string;
}
export interface RecordedTouchAction extends RecordedActionBase {
    element?: Element;
    coordinates: Coordinates;
    position: RecordedPosition;
    localPosition?: RecordedPosition;
}
export type TouchActionBase = ActionBase & StrictUnion<{
    element: ElementSelector;
    localPosition?: Position;
} | {
    coordinates: Coordinates;
} | {
    position: Position;
} | {
    localPosition: Position;
}>;
export type TapAction = TouchActionBase & {
    type: 'tap';
    duration?: number;
};
export interface RecordedTapAction extends RecordedTouchAction {
    type: 'tap';
    duration?: number;
}
export interface RecordedSwipeAction extends RecordedTouchAction {
    type: 'swipe';
    moves: SwipeMove[];
}
export type SwipeAction = TouchActionBase & {
    type: 'swipe';
    moves: SwipeMove[];
};
export interface RecordedKeypressAction extends ActionBase {
    type: 'keypress';
    key: string;
    shiftKey: boolean;
    character?: string;
}
export type KeypressAction = ActionBase & {
    type: 'keypress';
    shiftKey?: boolean;
} & ({
    key: string;
    character?: string;
} | {
    character: string;
    key?: string;
});
export type KeypressKey = StrictUnion<'Backspace' | 'Tab' | 'Enter' | string>;
export interface TypeAction extends InternalAPI.TypeAction {
}
export interface SoftKeyboardReturnAction extends InternalAPI.SoftKeyboardReturnAction {
}
export interface SoftKeyboardTextAction extends InternalAPI.SoftKeyboardTextAction {
}
export interface FindElementsAction {
    type: 'findElements';
    appId?: string;
    element: ElementSelector;
}
export interface PlayElementActionOptions {
    matchIndex?: number;
}
export type PlayActionOptions<A> = {
    timeout?: number;
} & (A extends TouchAction ? PlayElementActionOptions : {});
export interface PlayActionResult<A extends Action | RecordedAction = Action> {
    playback: {
        id?: string;
        action: A;
        timeout: number;
    };
    matchedElements: Element[];
}
export interface Element {
    path: string;
    type: string;
    source: string;
    bounds: ElementBounds;
    attributes: IOSElementAttributes | AndroidElementAttributes;
    accessibilityElements?: IOSAccessibilityElement[];
}
export interface ElementBounds {
    x: number;
    y: number;
    width: number;
    height: number;
}
export interface FullElement extends Element {
    children: FullElement[];
}
export type ElementSelector = Partial<Element> & {
    attributes?: Partial<Element['attributes']>;
};
export interface IOSElementAttributes extends Record<string, string | boolean | undefined | null>, IOSAccessibilityAttributes {
    text?: string;
    class?: string;
    baseClass?: string;
    title?: string;
    label?: string;
    placeholder?: string;
    userInteractionEnabled?: boolean;
    isHidden?: boolean;
}
export interface IOSAccessibilityAttributes {
    accessibilityLabel?: string;
    accessibilityIdentifier?: string;
    accessibilityValue?: string;
    accessibilityHint?: string;
}
export interface IOSAccessibilityElement extends IOSAccessibilityAttributes {
    accessibilityFrame?: ElementBounds;
    accessibilityTraits?: number;
}
export interface AndroidElementAttributes extends Record<string, string | undefined | null> {
    'resource-id'?: string | null;
    'content-desc'?: string | null;
    class?: string;
}
export type AllUI = Array<{
    type: 'app';
    appId?: string;
    children: FullElement[];
}>;
interface Playback<A extends Action | RecordedAction | RecordedTouchAction> {
    id?: string;
    action: A;
    timeout: number;
}
export type PlayActionErrorResponse<A extends Action | RecordedAction | RecordedTouchAction = Action> = {
    message: string;
    playback: Playback<A>;
} & ({
    errorId: 'unknown';
} | {
    errorId: 'invalidArgument';
} | {
    errorId: 'internalError';
} | {
    errorId: 'notFound';
    playback: A extends TouchAction | RecordedTouchAction ? Playback<A> : undefined;
} | {
    errorId: 'ambiguousMatch';
    playback: A extends TouchAction | RecordedTouchAction ? Playback<A> : undefined;
    matchedElements: Element[];
});
export {};
