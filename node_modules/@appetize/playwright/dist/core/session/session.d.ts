import { LiteralUnion, OmitUnion } from '../../core/util';
import { WaitForEventOptions } from '../../core/waitFor';
import { EventEmitter } from '../EventEmitter';
import { Action, Element, ElementSelector, FindElementsAction, PlayActionErrorResponse, PlayActionOptions, PlayActionResult, RecordedAction, SwipeAction, TapAction } from '../api/types/recorder';
import { AllUI } from '../api/types/recorder/public';
import { AppetizeApp } from '../api/types/app';
import { SwipeGesture } from '../builders/swipe-gesture';
import { DeviceInfo } from '../client';
import { Logger } from '../logger';
import { SocketProtocol } from '../api/types/socket';
export interface SessionArgs {
    path: string;
    token: string;
    socket: SocketProtocol;
    config: SessionConfig;
    device: DeviceInfo;
    logger: Logger;
    app?: AppetizeApp;
}
export declare class Session<Events extends SessionEvents = SessionEvents> extends EventEmitter {
    #private;
    socket: SocketProtocol;
    logger: Logger;
    path: string;
    token: string;
    app?: AppetizeApp;
    device: DeviceInfo;
    config: SessionConfig;
    protected isEndingManually: boolean;
    protected countdownWarning: boolean;
    protected ready: boolean;
    private _waitForAnimationsPromises;
    constructor({ socket, config, path, token, app, device, logger, }: SessionArgs);
    on<K extends Extract<keyof Events, string>>(event: K, listener: (value: Events[K]) => void): this;
    waitUntilReady(): Promise<void>;
    waitForEvent<K extends keyof SessionEvents>(event: K, options?: WaitForEventOptions<SessionEvents[K]>): Promise<SessionEvents[K]>;
    end(): Promise<void>;
    get networkInspectorUrl(): string | undefined;
    get adbConnection(): AdbConnectionInfo | undefined;
    rotate(direction: 'left' | 'right'): Promise<'portrait' | 'landscape'>;
    screenshot<T extends 'buffer' | 'base64', Data = T extends 'buffer' ? Buffer : string>(format?: T): Promise<{
        data: Data;
        mimeType: string;
    }>;
    heartbeat(): Promise<void>;
    type(text: string): Promise<PlayActionResult<{
        type: "typeText";
        text: string;
    }>>;
    keypress(key: KeyValue, options?: {
        shift?: boolean;
    }): Promise<void | PlayActionResult<{
        type: "keypress";
        key: "HOME" | "VOLUME_UP" | "VOLUME_DOWN" | (string & {
            zz_IGNORE_ME?: never;
        });
        shiftKey: boolean;
    }> | PlayActionResult<{
        type: "keypress";
        character: "VOLUME_UP" | "VOLUME_DOWN" | (string & {
            zz_IGNORE_ME?: never;
        });
    }>>;
    setLanguage(language: string): Promise<void>;
    setLocation(latitude: number, longitude: number): Promise<void>;
    openUrl(url: string): Promise<void>;
    launchApp(appId: string): Promise<void>;
    shake(): Promise<void>;
    toggleSoftKeyboard(): Promise<void>;
    biometry({ match }: {
        match: boolean;
    }): Promise<void>;
    addMedia(file: File): Promise<Response>;
    biometryEnrollment(isEnrolled: boolean): Promise<void>;
    allowInteractions(allow: boolean): Promise<void>;
    restartApp(): Promise<void>;
    reinstallApp(): Promise<void>;
    adbShellCommand(command: string): Promise<void>;
    playAction<T extends Action | RecordedAction>(action: T, options?: PlayActionOptions<T>): Promise<PlayActionResult<T>>;
    playActions<T extends Action | RecordedAction>(actions: T[], options?: PlayActionOptions<any>): Promise<PlayActionResult<any>[]>;
    getUI({ timeout, }?: {
        timeout?: number;
    }): Promise<AllUI>;
    findElement(element: ElementSelector, options?: PlayActionOptions<FindElementsAction> & Pick<FindElementsAction, 'appId'>): Promise<Element | undefined>;
    findElements(element: ElementSelector, options?: PlayActionOptions<FindElementsAction> & Pick<FindElementsAction, 'appId'>): Promise<Element[]>;
    tap(args: OmitUnion<TapAction, 'type' | 'id'>, options?: PlayActionOptions<TapAction>): Promise<PlayActionResult<TapAction>>;
    swipe({ duration, gesture, ...args }: SwipeArgs, options?: PlayActionOptions<SwipeAction>): Promise<PlayActionResult<SwipeAction>>;
    waitForAnimations(options?: {
        imageThreshold?: number;
        timeout?: number;
    }): Promise<void>;
    getAdbInfo(): Promise<AdbConnectionInfo | undefined>;
    getNetworkInspectorUrl(): Promise<string | undefined>;
    getDeviceInfo(): Promise<DeviceInfo>;
    private get isStandalone();
}
export interface SessionInfo {
    path: string;
    token: string;
}
export interface SessionEvents {
    log: {
        message: string;
    };
    network: NetworkRequest | NetworkResponse;
    error: {
        message: string;
    };
    action: RecordedAction;
    disconnect: void;
    end: void;
    interaction: {
        timeStamp: number;
        type: string;
        altKey?: boolean;
        shiftKey?: boolean;
        xPos?: number;
        yPos?: number;
    };
    heartbeat: void;
    orientationChanged: 'landscape' | 'portrait';
    appLaunch: void;
    firstFrameReceived: void;
    inactivityWarning: {
        secondsRemaining: number;
    };
    ready: void;
    video: {
        buffer: Uint8Array;
        width: number;
        height: number;
        codec: 'h264' | 'jpeg';
    };
    audio: {
        buffer: Uint8Array;
        codec: 'aac';
        duration: number;
    };
    playbackFoundAndSent: PlayActionResult<Action>;
    playbackError: PlayActionErrorResponse<Action>;
}
export interface AdbConnectionInfo {
    command: string;
    forwards: Array<{
        destination: string;
        port: number;
    }>;
    hash: string;
    hostname: string;
    port: number;
    user: string;
}
export interface SessionConfig {
    device?: string;
    osVersion?: string;
    scale?: number | 'auto';
    autoplay?: boolean;
    adbShellCommand?: string;
    androidPackageManager?: boolean;
    appearance?: string;
    audio?: boolean;
    codec?: string;
    debug?: boolean;
    deviceColor?: string;
    disableSessionStart?: boolean;
    disableVirtualKeyboard?: boolean;
    enableAdb?: boolean;
    grantPermissions?: boolean;
    hidePasswords?: boolean;
    iosKeyboard?: string;
    iosAutocorrect?: string;
    language?: string;
    launchUrl?: string;
    launchArgs?: Array<string | number>;
    locale?: string;
    location?: number[];
    loopback?: boolean;
    noVideo?: boolean;
    orientation?: string;
    platform?: 'ios' | 'android';
    payerCode?: string;
    params?: Record<string, any>;
    plistEdit?: Record<string, any>;
    proxy?: string;
    record?: boolean;
    region?: string;
    screenOnly?: boolean;
    screenRecording?: boolean;
    showRotateButtons?: boolean;
    timezone?: string;
    xdocMsg?: boolean;
    endSessionRedirectUrl?: string;
    userInteractionDisabled?: boolean;
    volume?: number;
    debugSession?: boolean;
}
export interface UserSessionConfig extends Omit<SessionConfig, 'platform' | 'xdocMsg'> {
    publicKey?: string;
    buildId?: string;
}
export interface NetworkRequest {
    type: 'request';
    serverIPAddress: string;
    requestId: string;
    request: {
        method: string;
        url: string;
        httpVersion: string;
        cookies: string[];
        headers: Array<{
            name: string;
            value: string;
        }>;
        queryString: string[];
        headersSize: number;
        bodySize: number;
    };
    cache: Record<string, any>;
}
export interface NetworkResponse extends Omit<NetworkRequest, 'type'> {
    type: 'response';
    response: {
        status: number;
        statusText: string;
        httpVersion: string;
        cookies: string[];
        headers: Array<{
            name: string;
            value: string;
        }>;
        redirectURL: string;
        headersSize: number;
        bodySize: number;
        content: {
            size: number;
            mimeType: string;
            compression: number;
            text: string;
        };
        postData?: {
            mimeType: string;
            text?: string;
        };
    };
}
export type KeyValue = LiteralUnion<'HOME' | 'VOLUME_UP' | 'VOLUME_DOWN' | 'ANDROID_KEYCODE_MENU', string>;
type SimpleGesture = 'up' | 'down' | 'left' | 'right';
export type SwipeArgs = OmitUnion<SwipeAction, 'type' | 'moves'> & {
    duration?: number;
    gesture: SimpleGesture | ((gesture: SwipeGesture) => any);
};
export {};
