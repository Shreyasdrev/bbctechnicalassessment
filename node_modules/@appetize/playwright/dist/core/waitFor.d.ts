import { EventEmitter } from 'events';
export declare function waitFor<T>(fn: (bail: (error: Error) => void) => T | Promise<T>, timeout?: number | null): Promise<T>;
export declare function waitForTimeout(ms: number): Promise<unknown>;
export interface WaitForEventOptions<T> {
    timeout?: number | null;
    predicate?: (data: T) => boolean;
}
export type WaitForEventOptionsOrPredicate<T> = WaitForEventOptions<T> | ((data: T) => boolean | undefined);
export declare function waitForEvent<T>(emitter: EventEmitter, event: string, optionsOrPredicate?: WaitForEventOptionsOrPredicate<T>): Promise<T>;
