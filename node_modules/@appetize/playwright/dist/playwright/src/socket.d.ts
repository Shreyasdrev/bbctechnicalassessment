import { Page } from '@playwright/test';
import { SocketProtocol } from '../../core/api/types/socket';
import { WaitForEventOptions } from '../../core/waitFor';
import { AppetizeWindowProtocol } from '../../core/window';
import { EventEmitter } from '../../core/EventEmitter';
import { AppetizeTestFixture } from './fixture';
export declare class AppetizeWindow extends EventEmitter implements AppetizeWindowProtocol {
    page: Page;
    ready: boolean;
    testFixture: AppetizeTestFixture;
    constructor({ page, testFixture, }: {
        page: Page;
        testFixture: AppetizeTestFixture;
    });
    init(): Promise<void>;
    waitUntilReady(): Promise<void>;
    postMessage<T>(data: any, waitForResponse?: boolean): Promise<T>;
}
export declare class PlaywrightSocket extends EventEmitter implements SocketProtocol {
    page: Page;
    type: 'webserver' | 'appetizer';
    window: AppetizeWindow;
    constructor({ page, type, window, }: {
        page: Page;
        type: 'webserver' | 'appetizer';
        window: AppetizeWindow;
    });
    send(event: string, data?: any): Promise<void>;
    disconnect(): Promise<void>;
    waitForEvent<T>(event: string, options: WaitForEventOptions<T>): Promise<T>;
}
