import { Page } from '@playwright/test';
import { SessionConfig } from '../../core/session';
import { PlaywrightClient } from './client';
import { PlaywrightSession, PlaywrightSessionConfig } from './session';
import { PlayActionResult, PlayActionErrorResponse } from '../../core/api/types/recorder';
import { AppetizeTestFixture } from './fixture';
export declare class AppetizePage {
    readonly page: Page;
    readonly testFixture: AppetizeTestFixture;
    session?: PlaywrightSession;
    client: PlaywrightClient;
    queueStart: number | null;
    queueEnd: number | null;
    config: PlaywrightSessionConfig;
    baseURL: string;
    sessionDebugInfo: {
        playedActions: ActionLog[];
        videoFrames: Array<{
            buffer: Uint8Array;
            codec: "h264" | "jpeg";
        }>;
        audioFrames: Array<{
            buffer: Uint8Array;
            codec: "aac";
        }>;
        debugLogs: string[];
    };
    constructor(args: {
        page: Page;
        testFixture: AppetizeTestFixture;
        config: PlaywrightSessionConfig;
        baseURL?: string;
    });
    get queueTime(): number | null;
    init(): Promise<void>;
    start(args: {
        config: SessionConfig;
    }): Promise<PlaywrightSession>;
    onTestStart(): void;
    private clearSessionDebugInfo;
    private requestKeyFrame;
}
type ActionLog = PlayActionErrorResponse | PlayActionResult;
export {};
